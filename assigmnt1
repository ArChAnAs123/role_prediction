package com.stackroute.keepnote.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.stackroute.keepnote.model.Note;
import com.stackroute.keepnote.repository.NoteRepository;

/*Annotate the class with @Controller annotation. @Controller annotation is used to mark 
 * any POJO class as a controller so that Spring can recognize this class as a Controller
 * */
@Controller
public class NoteController {
	/*
	 * From the problem statement, we can understand that the application requires
	 * us to implement the following functionalities.
	 * 
	 * 1. display the list of existing notes from the collection. Each note should
	 * contain Note Id, title, content, status and created date. 2. Add a new note
	 * which should contain the note id, title, content and status. 3. Delete an
	 * existing note. 4. Update an existing note.
	 */

	/*
	 * Get the application context from resources/beans.xml file using
	 * ClassPathXmlApplicationContext() class. Retrieve the Note object from the
	 * context. Retrieve the NoteRepository object from the context.
	 */
//	 ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");
//	 Note note=(Note)context.getBean("note");
//	 NoteRepository repository=(NoteRepository)context.getBean("NoteRepository");	

//	@Autowired
//	Note note;

	@Autowired
	NoteRepository repository;

	/*
	 * Define a handler method to read the existing notes by calling the
	 * getAllNotes() method of the NoteRepository class and add it to the ModelMap
	 * which is an implementation of Map for use when building model data for use
	 * with views. it should map to the default URL i.e. "/"
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String getNotes(ModelMap model) {
		model.addAttribute("notes", repository.getAllNotes());
		model.addAttribute("command", new Note());
		return "index";
	}

	/*
	 * Define a handler method which will read the Note data from request parameters
	 * and save the note by calling the addNote() method of NoteRepository class.
	 * Please note that the createdAt field should always be auto populated with
	 * system time and should not be accepted from the user. Also, after saving the
	 * note, it should show the same along with existing notes. Hence, reading notes
	 * has to be done here again and the retrieved notes object should be sent back
	 * to the view using ModelMap. This handler method should map to the URL
	 * "/saveNote".
	 */
	@RequestMapping(value = "/saveNote", method = RequestMethod.POST)
	public String saveNote(@ModelAttribute("note") Note note, ModelMap model) {
//		 System.out.println("inside save note");
		repository.addNote(note);
		model.addAttribute("notes", repository.getAllNotes());
		model.addAttribute("command", new Note());
		return "index";
	}

	/*
	 * Define a handler method to delete an existing note by calling the
	 * deleteNote() method of the NoteRepository class This handler method should
	 * map to the URL "/deleteNote"
	 */
	@RequestMapping(value = "/deleteNote")
	public String deleteNote(@RequestParam int noteId, ModelMap model) {
//		 System.out.println("inside delete note");
		repository.deleteNote(noteId);
		model.addAttribute("notes", repository.getAllNotes());
		model.addAttribute("command", new Note());
		return "redirect:" + "/";
	}

}








package com.stackroute.keepnote.model;

import java.time.LocalDateTime;

/*
 * The class "Note" will be acting as the data model for the Note data in the ArrayList.
 */
public class Note {

	/*
	 * This class should have five fields (noteId, noteTitle, noteContent,
	 * noteStatus and createdAt). This class should also contain the getters and
	 * setters for the fields. The value of createdAt should not be accepted from
	 * the user but should be always initialized with the system date
	 */

	private int noteId;

	private String noteTitle;

	private String noteContent;

	private String noteStatus;

	private LocalDateTime createdAt;

	public Note() {
	}

	public Note(int noteId, String noteTitle, String noteContent, String noteStatus) {
		super();
		this.noteId = noteId;
		this.noteTitle = noteTitle;
		this.noteContent = noteContent;
		this.noteStatus = noteStatus;
	}

	/* All the getters/setters definition should be implemented here */
	public int getNoteId() {
		return noteId;
	}

	public void setNoteId(int noteId) {
		this.noteId = noteId;
	}

	public String getNoteTitle() {
		return noteTitle;
	}

	public void setNoteTitle(String noteTitle) {
		this.noteTitle = noteTitle;
	}

	public String getNoteContent() {
		return noteContent;
	}

	public void setNoteContent(String noteContent) {
		this.noteContent = noteContent;
	}

	public String getNoteStatus() {
		return noteStatus;
	}

	public void setNoteStatus(String noteStatus) {
		this.noteStatus = noteStatus;
	}

	public LocalDateTime getCreatedAt() {
		return LocalDateTime.now();
	}

	/* Override the toString() method */

	@Override
	public String toString() {
		return null;
	}

}


package com.stackroute.keepnote.repository;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.springframework.stereotype.Repository;

import com.stackroute.keepnote.model.Note;

/*
 * This class contains the code for data storage interactions and methods 
 * of this class will be used by other parts of the applications such
 * as Controllers and Test Cases
 * */
@Repository
public class NoteRepository {

	/* Declare a variable called "list" to store all the notes. */
	List<Note> notes = null;

	public NoteRepository() {
		/* Initialize the variable using proper data type */
		notes = new ArrayList<>();
	}

	/* This method should return all the notes in the list */
	public List<Note> getList() {
		return this.notes;
	}

	/* This method should set the list variable with new list of notes */
	public void setList(List<Note> list) {
		this.notes = list;
	}

	/*
	 * This method should Note object as argument and add the new note object into
	 * list
	 */
	public void addNote(Note note) {
		getList().add(note);
	}

	/* This method should deleted a specified note from the list */
	public boolean deleteNote(int noteId) {
		/* Use list iterator to find matching note id and remove it from the list */
		ListIterator<Note> iterator = this.notes.listIterator();
		Boolean isRemoved = Boolean.FALSE;
		while (iterator.hasNext()) {
			if (noteId == iterator.next().getNoteId()) {
				iterator.remove();
				isRemoved = Boolean.TRUE;
			}
		}
		return isRemoved;
	}

	/* This method should return the list of notes */

	public List<Note> getAllNotes() {
		return this.getList();
	}

	/*
	 * This method should check if the matching note id present in the list or not.
	 * Return true if note id exists in the list or return false if note id does not
	 * exists in the list
	 */

	public boolean exists(int noteId) {
		return this.notes.stream().filter(note -> note.getNoteId() == noteId).findAny().isPresent();
	}
}











<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8" isELIgnored="false"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>

<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>KeepNote</title>
</head>
<body>
	<h2>Keep Notes</h2>
	<form:form method="POST" action="saveNote">
		<table>
			<tr>
				<td><form:label path="noteId">Note_id</form:label></td>
				<td><form:input path="noteId" /></td>
			</tr>
			<tr>
				<td><form:label path="noteTitle">Note_title</form:label></td>
				<td><form:input path="noteTitle" /></td>
			</tr>
			<tr>
				<td><form:label path="noteContent">Note_content</form:label></td>
				<td><form:input path="noteContent" /></td>
			</tr>
			<tr>
				<td><form:label path="noteStatus">Status</form:label></td>
				<td><form:input path="noteStatus" /></td>
			</tr>

			<tr>
				<td colspan="2"><input type="submit" value="Save Note" /></td>
			</tr>
		</table>
	</form:form>

	<hr />
	<h2>List of Notes</h2>
	<table border="1">
		<thead style="font-weight: bold">
			<td>Id</td>
			<td>Title</td>
			<td>Content</td>
			<td>Status</td>
			<td>createdOn</td>
			<td>Action</td>
		</thead>
		<c:forEach var="notee" items="${notes}">
			<tr>
				<td>${notee.noteId}</td>
				<td>${notee.noteTitle}</td>
				<td>${notee.noteContent}</td>
				<td>${notee.noteStatus}</td>
				<td>${notee.createdAt}</td>
				<td><form action="deleteNote" method="post">
						<input type="hidden" id="noteId" name="noteId"
							value="${notee.noteId}" />
						<button type="submit">Delete</button>
					</form></td>
			</tr>
			<br />
		</c:forEach>
	</table>

</html>
<form action="saveNote" method="post">
	  
	  Note ID:<br>
	  <input type="number" id="noteId" name="noteId"><br>
	  Title:<br>
	  <input type="text" id="noteTitle" name="noteTitle"><br>
	  Content:<br>
	  <input type="textarea" id="noteContent" name="noteContent"><br>
	  Status:<br>
	  <select id="noteStatus" name= "noteStatus">
		  <option value="active">Active</option>
		  <option value="inactive">Inactive</option>
	  </select>
	  <br>
	  <br>
	  <input type="submit" value="Submit">
	  
	</form> 
	<br>
	<!-- display all existing notes in a tabular structure with Id, Title,Content,Status, Created Date and Action -->
	<c:if test="${not empty error}">
	   <p style="color:red">Error</p>: ${error}
	</c:if>
	<h2>Saved Notes</h2>
	<table>
	<c:forEach items="${SavedNotes}" var="note">
		<tr>
		<td>Note ID</td>
		<td>${note.noteId}</td>
		</tr>
		
		<tr>
		<td>Title</td>
		<td>${note.noteTitle}</td>
		</tr>
		
		<tr>
		<td>Content</td>
		<td>${note.noteContent}</td>
		</tr>
		
		<tr>
		<td>Status</td>
		<td>${note.noteStatus}</td>
		</tr>
		
		<tr>
		<td>Created at</td>
		<td>${note.createdAt}</td>
		</tr>
		<tr>
		<td>
		
		<form action="deleteNote" method="post">
			<input type="hidden" id="noteId" name="noteId" value="${note.noteId}"/>
			<button type="submit">Delete</button>
		</form>
		</td>
		</tr>
		</c:forEach>	
	</table>

@RequestMapping("/saveNote")
	public String saveNote(ModelMap model ,@RequestParam Integer noteId,@RequestParam String noteTitle,@RequestParam String noteContent,@RequestParam String noteStatus ) {
		if(noteId==null||noteTitle.isEmpty()||noteContent.isEmpty()||noteStatus.isEmpty()) {
			model.addAttribute("error","Please fill out the required fields");
		}else if(noteRepository.exists(noteId)) {
			model.addAttribute("error","Note ID already exists");	
		}else {
			Note note1 = (Note) context.getBean("note");
			note1.setCreatedAt(LocalDateTime.now());
			note1.setNoteId(noteId);
			note1.setNoteTitle(noteTitle);
			note1.setNoteContent(noteContent);
			note1.setNoteStatus(noteStatus);
			noteRepository.addNote(note1);
//			List<Note> savedList = noteRepository.getAllNotes();	
		}
		model.addAttribute("SavedNotes",noteRepository.getList());
		return "index";	
	}
	
	/* Define a handler method to delete an existing note by calling the deleteNote() method 
	 * of the NoteRepository class
	 * This handler method should map to the URL "/deleteNote" 
	*/
	@RequestMapping("/deleteNote")
	public String deleteNote(ModelMap model ,@RequestParam int noteId) {
		noteRepository.deleteNote(noteId);
		model.addAttribute("SavedNotes", noteRepository.getAllNotes());
		return "redirect:"+"/";
	}
