
@RequestMapping("/saveNote")	public String saveNote(ModelMap model ,@RequestParam Integer noteId,@RequestParam String noteTitle,@RequestParam String noteContent,@RequestParam String noteStatus ) {		if(noteId==null||noteTitle.isEmpty()||noteContent.isEmpty()||noteStatus.isEmpty()) {			model.addAttribute("error","Please fill out the required fields");		}else if(noteRepository.exists(noteId)) {			model.addAttribute("error","Note ID already exists");			}else {			Note note1 = (Note) context.getBean("note");			note1.setCreatedAt(LocalDateTime.now());			note1.setNoteId(noteId);			note1.setNoteTitle(noteTitle);			note1.setNoteContent(noteContent);			note1.setNoteStatus(noteStatus);			noteRepository.addNote(note1);//			List<Note> savedList = noteRepository.getAllNotes();			}		model.addAttribute("SavedNotes",noteRepository.getList());		return "index";		}		/* Define a handler method to delete an existing note by calling the deleteNote() method 	 * of the NoteRepository class	 * This handler method should map to the URL "/deleteNote" 	*/	@RequestMapping("/deleteNote")	public String deleteNote(ModelMap model ,@RequestParam int noteId) {		noteRepository.deleteNote(noteId);		model.addAttribute("SavedNotes", noteRepository.getAllNotes());		return "redirect:"+"/";	}
















package com.stackroute.keepnote.model; import java.time.LocalDateTime; /* * The class "Note" will be acting as the data model for the Note data in the ArrayList. /public class Note {	private int noteId;	private String noteTitle;	private String noteContent;	private String noteStatus;	private LocalDateTime createdAt;	/	 * This class should have five fields (noteId, noteTitle, noteContent,	 * noteStatus and createdAt). This class should also contain the getters and	 * setters for the fields. The value of createdAt should not be accepted from	 * the user but should be always initialized with the system date	 / 	public Note() {	} 	/ All the getters/setters definition should be implemented here */ 	 	@Override	public String toString() {		return null;	} 	public int getNoteId() {		return noteId;	} 	public void setNoteId(int noteId) {		this.noteId = noteId;	} 	public String getNoteTitle() {		return noteTitle;	} 	public void setNoteTitle(String noteTitle) {		this.noteTitle = noteTitle;	} 	public String getNoteContent() {		return noteContent;	} 	public void setNoteContent(String noteContent) {		this.noteContent = noteContent;	} 	public String getNoteStatus() {		return noteStatus;	} 	public void setNoteStatus(String noteStatus) {		this.noteStatus = noteStatus;	} 	public LocalDateTime getCreatedAt() {		return createdAt;	} 	public void setCreatedAt(LocalDateTime createdAt) {		this.createdAt = createdAt;	}}

package com.stackroute.keepnote.repository; import java.util.ArrayList;import java.util.List; import javax.xml.bind.JAXBException; import org.xml.sax.SAXException; import com.stackroute.keepnote.model.Note;import com.sun.xml.bind.v2.runtime.reflect.ListIterator; /* * This class contains the code for data storage interactions and methods * of this class will be used by other parts of the applications such * as Controllers and Test Cases * / public class NoteRepository { 	/ Declare a variable called "list" to store all the notes. /	List<Note> list; 	public NoteRepository() {		list =new ArrayList<Note>();				/ Initialize the variable using proper data type /	}		/ This method should return all the notes in the list /	public List<Note> getList() {		return list;	} 	/ This method should set the list variable with new list of notes / 	public void setList(List<Note> list) {		this.list = list;	} 	/	 * This method should Note object as argument and add the new note object into	 * list	 / 	public void addNote(Note note) {		list.add(0, note);	} 	/ This method should deleted a specified note from the list / 	public boolean deleteNote(int noteId) {		/ Use list iterator to find matching note id and remove it from the list /		for(int i=0;i<list.size();i++) {			if(list.get(i).getNoteId()==noteId) {				list.remove(list.get(i));				return true;			}		}		return false;					} 	/ This method should return the list of notes / 	public List<Note> getAllNotes() {		return list;	} 	/	 * This method should check if the matching note id present in the list or not.	 * Return true if note id exists in the list or return false if note id does not	 * exists in the list	 */ 	public boolean exists(int noteId) {		boolean flag=false;		for(int i=0;i<list.size();i++) {			if(list.get(i).getNoteId()==noteId) {				flag = true;				break;			}		}		return flag;	}}








<%@ page language="java" contentType="text/html; charset=UTF-8"	pageEncoding="UTF-8" isELIgnored="false"%>	<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%> <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>KeepNote</title></head><body>	<!-- Create a form which will have text boxes for Note ID, title, content and status along with a Send 		 button. Handle errors like empty fields -->	<h2>Note Information</h2>		<form action="saveNote" method="post">	 	 Note ID:<br>	 <input type="number" id="noteId" name="noteId"><br>	 Title:<br>	 <input type="text" id="noteTitle" name="noteTitle"><br>	 Content:<br>	 <input type="textarea" id="noteContent" name="noteContent"><br>	 Status:<br>	 <select id="noteStatus" name= "noteStatus">		 <option value="active">Active</option>		 <option value="inactive">Inactive</option>	 </select>	 <br>	 <br>	 <input type="submit" value="Submit">	 	</form> 	<br>	<!-- display all existing notes in a tabular structure with Id, Title,Content,Status, Created Date and Action -->	<c:if test="${not empty error}">	 <p style="color:red">Error</p>: ${error}	</c:if>	<h2>Saved Notes</h2>	<table>	<c:forEach items="${SavedNotes}" var="note">		<tr>		<td>Note ID</td>		<td>${note.noteId}</td>		</tr>				<tr>		<td>Title</td>		<td>${note.noteTitle}</td>		</tr>				<tr>		<td>Content</td>		<td>${note.noteContent}</td>		</tr>				<tr>		<td>Status</td>		<td>${note.noteStatus}</td>		</tr>				<tr>		<td>Created at</td>		<td>${note.createdAt}</td>		</tr>		<tr>		<td>				<form action="deleteNote" method="post">			<input type="hidden" id="noteId" name="noteId" value="${note.noteId}"/>			<button type="submit">Delete</button>		</form>		</td>		</tr>		</c:forEach>		</table>	</body></html>
